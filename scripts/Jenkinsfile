import java.text.SimpleDateFormat

class Globals {
    static String rootCommit = null
    static String buildVersion = null
    static String dockerLabels = null
    static String dockerCacheArg = null
}

def jupyterImgTypes = ['base', 'datascience', 'tensorflow']

pipeline {
    agent { label 'ec2builder' }

    options {
        buildDiscarder(logRotator(numToKeepStr: '35', artifactNumToKeepStr: '35'))
    }
    environment {
        /*
        Job parameters
        */
        sharedLibPath = "legion-cicd/pipelines/legionPipeline.groovy"
        //Git Branch to build package from
        param_git_branch = "${params.GitBranch}"

        /*
        Release parameters
        */
        //Set next releases version explicitly
        param_next_version = "${params.NextVersion}"
        //Release version to tag all artifacts to
        param_release_version = "${params.ReleaseVersion}"
        //Push release git tag
        param_push_git_tag = "${params.PushGitTag}"
        //Rewrite git tag if exists
        param_force_tag_push = "${params.ForceTagPush}"
        param_update_version_string = "${params.UpdateVersionString}"
        param_update_master = "${params.UpdateMaster}"
        //Build major version release and optionally push it to public repositories
        param_stable_release = "${params.StableRelease}"

        /*
        CI/CD repository
        */
        legionCicdGitlabKey = "${params.legionCicdGitlabKey}"
        param_git_deploy_key = "${params.GitDeployKey}"
        // CI/CD repo url (for pipeline methods import)
        param_legion_cicd_repo = "${params.LegionCicdRepo}"
        // CI/CD repo branch (tag or branch name)
        param_legion_cicd_branch = "${params.LegionCicdBranch}"

        /*
        Docker
        */
        param_dockerhub_publishing_enabled = "${params.DockerHubPublishingEnabled}"
        param_docker_registry = "${params.DockerRegistry}"
        param_docker_hub_registry = "${params.DockerHubRegistry}"
        param_enable_docker_cache = "${params.EnableDockerCache}"
        param_docker_cache_source = "${params.DockerCacheSource}"

        /*
        PyPi
        */
        param_pypi_public_url = "${params.PyPiPublicUrl}"
        param_pypi_public_creds = "pypi_public_cred"
        param_pypi_private_url = "${params.PyPiPrivateUrl}"
        param_pypi_private_creds = "nexus-local-repository"
        param_pypi_publishing_enabled = "${PyPiPublishingEnabled}"

        // NPM
        param_npm_public_url = "${params.NpmPublicUrl}"
        param_npm_public_creds = "npm_public_cred"
        param_npm_private_url = "${params.NpmPrivateUrl}"
        param_npm_private_creds = "nexus-local-repository"
        param_npm_publishing_enabled = "${NpmPublishingEnabled}"
    }

    stages {
        stage('Checkout and set build vars') {
            steps {
                cleanWs()
                checkout scm
                script {
                    // import CI/CD components
                    sshagent(["${env.legionCicdGitlabKey}"]) {
                        print("Checkout CI/CD repo")
                        sh """#!/bin/bash -ex
                        mkdir -p \$(getent passwd \$(whoami) | cut -d: -f6)/.ssh && ssh-keyscan git.epam.com >> \$(getent passwd \$(whoami) | cut -d: -f6)/.ssh/known_hosts
                        if [ ! -d "legion-cicd" ]; then
                            git clone ${env.param_legion_cicd_repo} legion-cicd
                        fi
                        cd legion-cicd && git checkout ${env.param_legion_cicd_branch}
                        """

                        print("Load common CI/CD pipeline library")
                        cicdLibrary = load "${env.sharedLibPath}"
                    }

                    verFiles = [
                            "odahuflow/jupyterlab/version.py",
                            "package.json",
                    ]
                    cicdLibrary.setBuildMeta(verFiles)
                }
            }
        }

        stage('Build ODAHU artifacts') {
            parallel {
                stage("Publish PyPi packages") {
                    steps {
                        script {
                            cicdLibrary.publishPythonPackage("./", env.param_pypi_private_creds, env.param_pypi_private_url, env.param_pypi_publishing_enabled, env.param_pypi_public_creds, env.param_pypi_public_url)
                        }
                    }
                }
                stage('Publish NPM packages') {
                    steps {
                        script {
                            cicdLibrary.publishNpmPackage("./", env.param_npm_private_creds, env.param_npm_private_url, env.param_npm_publishing_enabled, env.param_npm_public_creds, env.param_npm_public_url)
                        }
                    }
                }
            }
        }

        stage("Build Docker images") {
            steps {
                script {
                    def buildArgs = """--build-arg NPM_EXTRA_INDEX_URL=https://${env.param_npm_private_url}
                                       --build-arg ODAHU_PLUGIN_VERSION=${Globals.buildVersion}
                                    """.replaceAll("\\s+"," ")
                    def buildStages = [:]
                    jupyterImgTypes.each { type ->
                        buildStages[type] = {
                            stage(type) {
                                cicdLibrary.buildDockerImage(
                                    "${type}-notebook",
                                    ".",
                                    "containers/jupyter-stacks/Dockerfile",
                                    "${buildArgs} --build-arg NOTEBOOK_TYPE=${type}"
                                )
                            }
                        }
                    }
                    parallel buildStages
                }
            }
        }

        stage("Publish Docker images") {
            steps {
                script {
                    def uploadStages = [:]
                    jupyterImgTypes.each { type ->
                        uploadStages[type] = {
                            stage(type) {
                                cicdLibrary.uploadDockerImage(
                                    "${type}-notebook",
                                    env.param_stable_release.toBoolean() && env.param_dockerhub_publishing_enabled.toBoolean()
                                )
                            }
                        }
                    }
                    parallel uploadStages
                }
            }
        }

        stage("Update branch") {
            steps {
                script {
                    cicdLibrary.updateReleaseBranches(
                            env.param_stable_release.toBoolean(),
                            env.param_push_git_tag.toBoolean(),
                            env.param_update_version_string.toBoolean(),
                            env.param_update_master.toBoolean(),
                            env.param_git_deploy_key)
                }
            }
        }
    }

    post {
        always {
            deleteDir()
        }
    }
}
